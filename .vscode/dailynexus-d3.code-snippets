{
	// Place your template workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"D3 Size Object": {
		"scope": "javascript",
		"prefix": "const size = ",
		"body": [
			"const size = {",
			"  height: 400,",
			"  width: Math.min(600, window.innerWidth - 40),",
			"};",
			"",
			"$0"
		],
		"description": "D3 Size Object"
	},
	"D3 Margin Default Object": {
		"scope": "javascript",
		"prefix": "const margin = ",
		"body": [
			"const margin = {",
			"  top: 10,",
			"  right: 10,",
			"  bottom: 10,",
			"  left: 10,",
			"};",
			"",
			"$0"
		],
		"description": "D3 Size Object"
	},
	"D3 Svg Object": {
		"scope": "javascript",
		"prefix": "const svg = ",
		"body": [
			"const svg = container",
			"  .append('svg')",
			"  .attr('height', size.height)",
			"  .attr('width', size.width);",
			"",
			"$0"
		],
		"description": "D3 Size Object"
	},
	"D3 Line Object": {
		"scope": "javascript",
		"prefix": "d3.line()",
		"body": [
			"line()",
			"  .x((d) => x(d.$1))",
			"  .y((d) => y(d.$2));",
			"",
			"$0"
		],
		"description": "D3 Size Object"
	},
	"D3 Area Object": {
		"scope": "javascript",
		"prefix": "d3.area()",
		"body": [
			"area()",
			"  .x((d) => x(d.$1))",
			"  .y0((d) => y(d.$2))",
			"  .y1((d) => y(d.$3));",
			"",
			"$0"
		],
		"description": "D3 Size Object"
	},
	"D3 Stack Object": {
		"scope": "javascript",
		"prefix": "d3.stack()",
		"body": [
			"stack()",
			"  .keys([])",
			"  .value((d, key) => $1)(${2:data})",
			"",
			"$0"
		],
		"description": "D3 Size Object"
	},
	"D3 Nest Object": {
		"scope": "javascript",
		"prefix": "d3.nest()",
		"body": [
			"nest()",
			"  .key(d => d.$1)",
			"  .entries(${2:data})",
			"",
			"$0"
		],
		"description": "D3 Size Object"
	},
	"d3 axis bottom": {
		"scope": "javascript",
		"prefix": "axis bottom",
		"body": [
			"svg",
			"  .append('g')",
			"  .style('color', '#adadad')",
			"  .style('font-size', '12pt')",
			"  .attr('transform', `translate(0, ${size.height - margin.bottom})`)",
			"  .call(axisBottom().scale(x));",
			"",
			"$0"
		],
		"description": "D3 Size Object"
	},
	"d3 axis left": {
		"scope": "javascript",
		"prefix": "axis left",
		"body": [
			"svg",
			"  .append('g')",
			"  .style('color', '#adadad')",
			"  .style('font-size', '12pt')",
			"  .attr('transform', `translate(${margin.left}, 0)`)",
			"  .call(axisLeft().scale(y));",
			"",
			"$0"
		],
		"description": "D3 Size Object"
	},
	"d3 starter": {
		"scope": "javascript",
		"prefix": "start",
		"body": [
			"/**",
			" * ${1:File Description}",
			" *",
			" * @author ${2:Name}",
			" *",
			" */",
			"import { select } from 'd3-selection';",
			"import { scaleLinear } from 'd3-scale';",
			"",
			"/**",
			" * @param {*} data - ${3:What is the data?}",
			" *",
			" * @author ${2:Name}",
			" *",
			" * @since ${4:Date}",
			" */",
			"const makePlot = (data) => {",
			"  /*",
			"    Container Setup:",
			"  */",
			"",
			"  // The class is necessary to apply styling",
			"  const container = select('#${5:div-id}').attr('class', 'MY_CLASS');",
			"",
			"  // When the resize event is called, reset the plot",
			"  container.selectAll('*').remove();",
			"",
			"  container.append('h1').text('My title');",
			"",
			"  const size = {",
			"    height: 400,",
			"    width: Math.min(600, window.innerWidth - 40),",
			"  };",
			"",
			"  const margin = {",
			"    top: 10,",
			"    right: 10,",
			"    bottom: 10,",
			"    left: 10,",
			"  };",
			"",
			"  const svg = container",
			"    .append('svg')",
			"    .attr('height', size.height)",
			"    .attr('width', size.width);",
			"",
			"  container",
			"    .append('a')",
			"    .text('Source: __________')",
			"    .attr('href', '');",
			"",
			"  /*",
			"    Create Scales:",
			"  */",
			"",
			"  const x = scaleLinear()",
			"    .domain([0, 1])",
			"    .range([margin.left, size.width - margin.right]);",
			"",
			"  const y = scaleLinear()",
			"    .domain([0, 1])",
			"    .range([size.height - margin.bottom, margin.top]);",
			"",
			"  /*",
			"    Start Plot:",
			"  */",
			"  $0",
			"};",
			"",
			"export default makePlot;",
			""
		],
		"description": ""
	},
	"map": {
		"scope": "javascript",
		"prefix": ".map",
		"body": [
			".map((d) => {",
			"  $1",
			"  return $2;",
			"})$0",
		],
		"description": "D3 Size Object"
	},
	"map i": {
		"scope": "javascript",
		"prefix": ".map i",
		"body": [
			".map((d, i) => {",
			"  $1",
			"  return $2;",
			"})$0"
		],
		"description": "D3 Size Object"
	},
	"filter": {
		"scope": "javascript",
		"prefix": ".filter",
		"body": [
			".filter((d) => {",
			"  $1",
			"  return $2;",
			"})$0"
		],
		"description": "D3 Size Object"
	},
	"filter i": {
		"scope": "javascript",
		"prefix": ".filter i",
		"body": [
			".filter((d, i) => {",
			"  $1",
			"  return $2;",
			"})$0"
		],
		"description": "D3 Size Object"
	},
	"reduce": {
		"scope": "javascript",
		"prefix": ".reduce",
		"body": [
			".reduce((acc, curr) => {",
			"  $1",
			"  return $2;",
			"})$0"
		],
		"description": "D3 Size Object"
	},
	"forEach": {
		"scope": "javascript",
		"prefix": ".forEach",
		"body": [
			".forEach((d) => {",
			"  $1",
			"});",
			"",
			"$0"
		],
		"description": "D3 Size Object"
	},
	"forEach i": {
		"scope": "javascript",
		"prefix": ".forEach i",
		"body": [
			".forEach((d, i) => {",
			"  $1",
			"});",
			"",
			"$0"
		],
		"description": "D3 Size Object"
	},
	"text": {
		"prefix": " text",
		"body": [
			".append('text')",
			"  .text(${1:(d) => ${2:d}})",
			"  .attr('x', $3)",
			"  .attr('y', $4)",
			"  ${5:.attr('fill', '#${6:d3d3d3}')}",
			"  ${7:.style('font-size', '$8')}",
			"  ${9:.attr('text-anchor', '${10:end}')}",
			"  ${11:.attr('alignment-baseline', '${12:hanging}');}",
			"",
			"$0"
		],
		"description": ""
	},
	"line": {
		"prefix": "line",
		"body": [
			".append('line')",
			"  .attr('x1', $1)",
			"  .attr('x2', $2)",
			"  .attr('y1', $3)",
			"  .attr('y2', $4)",
			"  ${5:.attr('stroke', $6)}",
			"  ${7:.attr('stroke-width', $8)}",
			"  ${9:.style('stroke-dasharray', '3, 3')};",
			"",
			"$0"
		],
		"description": ""
	},
	"circle": {
		"prefix": " circle",
		"body": [
			".append('circle')",
			"  .attr('cx', $1)",
			"  .attr('cy', $2)",
			"  .attr('r', $3)",
			"  .attr('fill', $4);",
			"",
			"$0"
		],
		"description": ""
	},
	"rect": {
		"prefix": " rect",
		"body": [
			".append('rect')",
			"  .attr('x', $1)",
			"  .attr('width', $2)",
			"  .attr('y', $3)",
			"  .attr('height', $4)",
			"  .attr('fill', $5);",
			"",
			"$0"
		],
		"description": ""
	}
}
// things like  triangles- maybe?
// checkout: https://snippet-generator.app/